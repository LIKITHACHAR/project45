from tensorflow import keras
from tensorflow.keras import layers

# Sample data (replace with your actual data)
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])  # Features
y = np.array([0, 1, 1, 0])  # Labels (0 or 1 for binary classification)

# Define the model architecture (change as needed)
model = keras.Sequential([
  layers.Dense(4, activation='relu', input_shape=(X.shape[1],)),  # Hidden layer with 4 neurons and ReLU activation
  layers.Dense(1, activation='sigmoid')  # Output layer with 1 neuron and sigmoid activation for binary classification
])

# Compile the model (specifies optimizer and loss function)
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model on the data
model.fit(X, y, epochs=100, batch_size=4)  # Adjust epochs and batch_size as needed

# Make predictions for testing data (replace with your actual data)
new_data = np.array([[0.5, 0.8]])
predictions = model.predict(new_data)

# Print the predicted class probabilities
print(f"Predicted probabilities for new data: {predictions[0]}")

# Get the predicted class (assuming highest probability determines the class)
predicted_class = np.argmax(predictions[0])
print(f"Predicted class for new data: {predicted_class}")  # 0 or 1 based on your labels
